# -*- coding: utf-8 -*-
"""Desafiofinal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17fC-bgrj1OOcrL7OwpRg71TtoxMdSO-k
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


df = pd.read_csv("academia_redfit.csv")
df

df['sexo'] = df['sexo'].str.strip().str.capitalize()
df['estado'] = df['estado'].str.strip().str.capitalize()
df['tipo_atividade'] = df['tipo_atividade'].str.strip().str.capitalize()
df

df['evolucao_PGC'] = df['primeiro_PGC'] - df['ultimo_PGC']
df

df.to_csv("dados_redfit_limpo.csv")
print("Dados tratados salvos em 'dados_redfit_limpo'Â comÂ sucesso!")

import matplotlib.pyplot as plt

estado_contagem = df['estado'].value_counts()
plt.bar(estado_contagem.index, estado_contagem.values, color=['Black', 'red', 'yellow'])
plt.title('Clientes por Estado (Ativo vs SedentÃ¡rio)')
plt.xlabel('Estado do Cliente')
plt.ylabel('NÃºmero de Clientes')
plt.show()

clientes_sexo = df['sexo'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(clientes_sexo.values,
        labels=clientes_sexo.index,
        colors=['black', 'red', 'yellow'],
        autopct='%1.1f%%',          # mostra porcentagem
        textprops={'color': 'white'}, # cor do texto em branco
        startangle=90)

plt.title('DistribuiÃ§Ã£o de Clientes por Sexo')
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

df = pd.read_csv("dados_redfit_limpo.csv")
df

X = df[['idade', 'frequencia_semanal_treino', 'tempo_medio_exercicio', 'minutos_totais_semana', 'primeiro_PGC', 'ultimo_PGC', 'evolucao_PGC']]
y = df['estado']
df

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

df["estado"] = df["estado"].apply(standardize_estado)

features = []
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
features += num_cols
for c in ["sexo", "tipo_atividade", "plano"]:
    if c in df.columns:
        features.append(c)

df_model = df[features + ["estado"]].dropna(subset=["estado"]).copy()

encoders = {}
for c in df_model.select_dtypes(include=["object"]).columns:
    if c == "estado":
        continue
    le = LabelEncoder()
    df_model[c] = le.fit_transform(df_model[c].fillna("Desconhecido"))
    encoders[c] = le

le_target = LabelEncoder()
df_model["estado_enc"] = le_target.fit_transform(df_model["estado"])

X = df_model.drop(columns=["estado", "estado_enc"])
y = df_model["estado_enc"]

for col in X.columns:
    if X[col].dtype.kind in "biufc":
        X[col] = X[col].fillna(X[col].median())
    else:
        X[col] = X[col].fillna(0)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)

clf = RandomForestClassifier(n_estimators=200, random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)


print("ðŸ”¹ AcurÃ¡cia:", accuracy_score(y_test, y_pred))
print("\nðŸ”¹ RelatÃ³rio de ClassificaÃ§Ã£o:\n",
      classification_report(y_test, y_pred, target_names=le_target.classes_))
print("\nðŸ”¹ Matriz de ConfusÃ£o:\n", confusion_matrix(y_test, y_pred))

X_full = df_model.drop(columns=["estado", "estado_enc"])
y_pred_full = clf.predict(X_full)

df["estado_previsto"] = le_target.inverse_transform(y_pred_full)

df.to_csv("clientes_redfit_com_previsao.csv", index=False)
print("âœ… Arquivo salvo: clientes_redfit_com_previsao.csv")